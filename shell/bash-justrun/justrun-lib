#!/bin/bash
# ----------------------------------------------------------------------------+
# JustRun shell library on BASH shell                                         |
# https://github.com/mn3m0nic/ffts/blob/master/shell/bash-justrun/justrun-lib |
# v0.01 (c) Nick Void under GPL v2 license 2016                               |
# please check last version before use it                                     |
# ----------------------------------------------------------------------------+
[ -z "$OUT" ] && OUT=out
[ -z "$CONC" ] && CONC=$(cat /proc/cpuinfo | grep process | wc -l)
[ -z "$DEBUG" ] && DEBUG=0
[ -z "$SHOW" ] && SHOW=1
[ -z "$CLEAROUT" ] && CLEAROUT=1
FORKKEY=FORKBEGIN
LOGFILE=.justrun.log
LOG=1
TOTALARGS=$#
#
echod()
{
	if [ "$DEBUG" == "1" ]; then 
		echo "$@" >&2
		[ "$LOG" == "1" ] && echo "$@" >> $LOGFILE
	fi
}
echol()
{
        if [ "$LOG" == "1" ]; then
                echo "$@" >> $LOGFILE
        fi
}
check()
{
	if [ "$TOTALARGS" -eq "0" ]; then
		echo "Requred parameter is missing."
		exit
	fi
	if [ "$CLEAROUT" -eq "1" ]; then
		if [ -d "$OUT" ]; then
			rm -rf $OUT
		fi
	fi
	if [ ! -d "$OUT" ]; then
		mkdir -p $OUT
	fi
	MAX=$#
	echod "Setting new MAX=$MAX"
}
showprline()
{
	c1=$(echo "$1" | grep -oP "[0-9]*")
	[[ c1 -gt 100 ]] && c1=100;
	let c1=c1/2; let c2=50-c1
	printf "%3d %% [" $1
	for (( i=$c1; i>0; i-- )); do 
		echo -n "█"
	done
	for (( i=$c2; i>0; i-- )); do
		echo -n "░"
	done
	echo -n "]"
}
show()
{
	if [ "$SHOW" == 1 ]; then
		let cleard=cleard+1
		if [ $cleard -gt 100 ]; then
			clear
			let cleard=0
		fi
		#tput sc
		tput cup 0 0
		echo "┌────────────────────────────────────────────────────────────┐"
		let PERC=(JCOUNT+$#)*100/TOTALARGS
		let PERC=100-PERC
		ARGC=$#
		printf "│ Jobs running: %-10.10s │ In queue: %-10.10s %10s │\n" $JCOUNT $ARGC " "
		#echo "│ Jobs running: $JCOUNT_S | In queue: $ARGC_S from $TOTALARGS_S │"
		printf "│ %03d %c %s │\n" $(showprline $PERC)
		#echo -n "│"; showprline $PERC;	echo "│"
		echo "└────────────────────────────────────────────────────────────┘"
		#tput rc
		F=$(find $OUT/ -type f -name "*.txt" -size +0 | wc -l)
		FE=$(find $OUT/ -type f -name "*.err" -size +0 | wc -l)
		printf "Processed with data returned:  %-10.10d\n" $F
		printf "Processed with error returned: %-10.10d\n" $FE
		#grep -hre ".*" $OUT/ | sed -e 's|:|\t|' | tail -n 30
		if [ "$DEBUG" == "1" ]; then
			grep -re ".*" $OUT/ | sed -e 's|:|\t|' | tail -n 25
		fi
	fi
}
run_forks()
{
	JCOUNT="-1"
	let CPID=0
	Q=0
	while [ "$Q" -ne "1" ]; do
		#echol "JCOUNT=$JCOUNT MAX=$MAX CONC=$CONC"
		if [ "$JCOUNT" -lt "$CONC" ]; then
			let CPID=CPID+1
			if [ "$JCOUNT" -lt "$MAX" ]; then
				echod "JCOUNT=$JCOUNT < CONC=$CONC --> starting new task"
				# Setting parameters of running process:
				PARAMS="$1"
				if [ ! -z "$PARAMS" ]; then
					shift
					# Running process
					DATE=$(date +"%Y%m%d%H%M%S")
					echol "starting new fork at $DATE with arguments $PARAMS"
					echol "OUT=$OUT $0  $PARAMS  $DATE"
					bash -c "$0 $FORKKEY $PARAMS" > $OUT"/"$PARAMS"_at_"$DATE".txt" 2> $OUT"/"$PARAMS"_at_"$DATE".err"  &
				fi
			fi
		fi
		J=$(jobs -r)
		JCOUNT=$(echo -e "$J" | sed -e '/^$/d'| wc -l)
		show "$@"
		if [ -z "$J" ] && [ -z "$1" ]; then
			Q=1
		fi
		sleep .01
	done
	echod "All complete at $(date)."
}
main()
{
	if [ "$1" == "$FORKKEY" ]; then
		shift
		fork_body "$@"
	else
		tput civis
		clear
		check "$@"
		run_forks "$@"
		tput cnorm
	fi
}
